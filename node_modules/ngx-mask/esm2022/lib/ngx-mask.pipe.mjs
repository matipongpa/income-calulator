import { inject, Pipe } from '@angular/core';
import { NGX_MASK_CONFIG } from './ngx-mask.config';
import { NgxMaskService } from './ngx-mask.service';
import { MaskExpression } from './ngx-mask-expression.enum';
import * as i0 from "@angular/core";
export class NgxMaskPipe {
    defaultOptions = inject(NGX_MASK_CONFIG);
    _maskService = inject(NgxMaskService);
    _maskExpressionArray = [];
    mask = '';
    transform(value, mask, { patterns, ...config } = {}) {
        let processedValue = value;
        const currentConfig = {
            maskExpression: mask,
            ...this.defaultOptions,
            ...config,
            patterns: {
                ...this._maskService.patterns,
                ...patterns,
            },
        };
        Object.entries(currentConfig).forEach(([key, val]) => {
            this._maskService[key] = val;
        });
        if (mask.includes('||')) {
            const maskParts = mask.split('||');
            if (maskParts.length > 1) {
                this._maskExpressionArray = maskParts.sort((a, b) => a.length - b.length);
                this._setMask(processedValue);
                return this._maskService.applyMask(`${processedValue}`, this.mask);
            }
            else {
                this._maskExpressionArray = [];
                return this._maskService.applyMask(`${processedValue}`, this.mask);
            }
        }
        if (mask.includes(MaskExpression.CURLY_BRACKETS_LEFT)) {
            return this._maskService.applyMask(`${processedValue}`, this._maskService._repeatPatternSymbols(mask));
        }
        if (mask.startsWith(MaskExpression.SEPARATOR)) {
            if (config.decimalMarker) {
                this._maskService.decimalMarker = config.decimalMarker;
            }
            if (config.thousandSeparator) {
                this._maskService.thousandSeparator = config.thousandSeparator;
            }
            if (config.leadZero) {
                this._maskService.leadZero = config.leadZero;
            }
            processedValue = String(processedValue);
            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();
            if (!Array.isArray(this._maskService.decimalMarker)) {
                processedValue =
                    this._maskService.decimalMarker !== localeDecimalMarker
                        ? processedValue.replace(localeDecimalMarker, this._maskService.decimalMarker)
                        : processedValue;
            }
            if (this._maskService.leadZero &&
                processedValue &&
                this._maskService.dropSpecialCharacters !== false) {
                processedValue = this._maskService._checkPrecision(mask, processedValue);
            }
            if (this._maskService.decimalMarker === MaskExpression.COMMA) {
                processedValue = processedValue.replace(MaskExpression.DOT, MaskExpression.COMMA);
            }
            this._maskService.isNumberValue = true;
        }
        if (processedValue === null || typeof processedValue === 'undefined') {
            return this._maskService.applyMask('', mask);
        }
        return this._maskService.applyMask(`${processedValue}`, mask);
    }
    _setMask(value) {
        if (this._maskExpressionArray.length > 0) {
            this._maskExpressionArray.some((mask) => {
                const test = this._maskService.removeMask(value)?.length <=
                    this._maskService.removeMask(mask)?.length;
                if (value && test) {
                    this.mask = mask;
                    return test;
                }
                else {
                    const expression = this._maskExpressionArray[this._maskExpressionArray.length - 1] ??
                        MaskExpression.EMPTY_STRING;
                    this.mask = expression;
                }
            });
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.9", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: "mask" });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.9", ngImport: i0, type: NgxMaskPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'mask',
                    pure: true,
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,